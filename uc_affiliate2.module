<?php
// $Id$


/**
 * @file
 * Tracks affiliate referrals and commissions
 *
 * Uses role based authorization to track affiliate referrals
 * and affiliate commissions
 */


/**
 * Implementation of hook_help().
 */
function uc_affiliate2_help($path, $arg) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Tracks affiliate referrals and commissions');
      break;
    case 'admin/modules/affiliate':
      return t('Display user hierarchy.');
      break;
  }
}

/**
 * Implementation of hook_perm()
 */
function uc_affiliate2_perm() {
  return array('act as affiliate', 'adjust user commissions', 'administer affiliates');
}

/**
 * Implementation of hook_menu().
 */
function uc_affiliate2_menu() {
  $access = array('administer affiliates');

  $items['admin/store/affiliate'] = array(
    'title' => 'Affiliates',
    'description' => 'Manage site affiliates',
    'page callback' => 'uc_affiliate2_admin_manage',
    'access arguments' => $access
  );

  $items['admin/store/affiliate/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    '#weight' => -10,
    'access arguments' => $access
  );
  $items['admin/store/affiliate/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_admin_settings'),
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/store/affiliate/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'uc_affiliate2_monthly_report',
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK
  );
  $items['affiliate'] = array(
    'page callback' => 'uc_affiliate2_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['user/%user/affiliate'] = array(
    'title' => 'Affiliate Center',
    'page callback' => 'uc_affiliate2_dashboard',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    '#weight' => -9
  );
  $items['user/%user/affiliate/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'uc_affiliate2_dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    '#weight' => 0
  );
  $items['user/%user/affiliate/links'] = array(
    'title' => 'Generate Links',
    'page callback' => 'uc_affiliate2_links',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    '#weight' => 1
  );
  $items['user/%user/affiliate/links/export'] = array(
    'title' => 'Export Products - HTML',
    'page callback' => 'uc_affiliate2_links_export',
    'type' => MENU_CALLBACK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
  );
  $items['user/%user/affiliate/commisssions'] = array(
    'title' => 'Commissions',
    'page callback' => 'uc_affiliate2_commissions',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    '#weight' => 2
  );
  $items['user/%user/affiliate/clicks'] = array(
    'title' => 'Unique Click Count',
    'page callback' => 'uc_affiliate2_clicks',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    '#weight' => 3
  );

  $items['user/%user/affiliate/downline'] = array(
    'title' => 'Downline',
    'page callback' => 'uc_affiliate2_downline',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1, 'hierarchy'),
    '#weight' => 4
  );
  $items['user/%user/affiliate/upline'] = array(
    'title' => 'Upline',
    'page callback' => 'uc_affiliate2_upline',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1, 'hierarchy'),
    '#weight' => 5
  );

  //add item to node-form to adjust commissions by product
  $items['node/%node/edit/commissions'] = array(
    'title' => 'Affiliate Commissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_product_commission', 1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_node_access',
    'access arguments' => array(1),
    '#weight' => 1,
  );

  return $items;
}

function _uc_affiliate2_node_access($node) {
  if (in_array($node->type, module_invoke_all('product_types')) && user_access('administer products')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Since user_access only accepts one access rule as an argument, and we need
 * several checks, which are no longer possible to be done in hook_menu,
 * we do them here.
 */
function _uc_affiliate2_user_access($account, $mode = '') {
  global $user;

  // The admin can't be an affiliate.
  if($account->uid <= 1) {
    return FALSE;
  }

  $access = (($user->uid == $account->uid) && user_access('act as affiliate', $account)) || (user_access('administer users') && user_access('act as affiliate', $account));

  if ($mode == 'hierarchy') {
    //show upline and downline if affiliate hierarchy depth is greater than 1
    if (variable_get('affiliate_hierarchy_depth', 5) > 1 && $access) {
      return TRUE;
    }

    return FALSE;
  }

  return $access;
}


/**
 * Implementation of hook_init().
 * This function sets $_SESSION['affiliate'] and increments click count
 */
function uc_affiliate2_init() {
  uc_affiliate2_click();
}

// Form to associate attributes with products or classes.
function uc_affiliate2_product_commission($form_state, $node) {
  // Get commission structure for this product
  $result = db_query("SELECT commission_structure FROM {uc_affiliate2_product_commission} WHERE nid = %d", $node->nid);
  if ($product_commission = db_fetch_object($result)) {
    $commission_structure = $product_commission->commission_structure;
  }
  else {
    $commission_structure = 0;
  }

  $form['affiliate_commission_structure_product'] = array(
    '#type' => 'textfield',
    '#title' => t('Product Commission Structure'),
    '#description' => t('Sets the commission structure for this product.  This should be a comma separated list of number with the first value corresponding to the first level in the hierarchy and each successive value corresponding to the next level in the hierarchy.  Example: 5,4,2,2,1'),
    '#default_value' => unserialize($commission_structure),
    '#size' => 10
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function uc_affiliate2_product_commission_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $commission_structure = $form_state['values']['affiliate_commission_structure_product'];

  $result = db_fetch_object(db_query("SELECT uapc.commission_structure FROM {uc_affiliate2_product_commission} AS uapc WHERE uapc.nid = %d", $nid));
  if ($result && $result->commission_structure) {
    db_query('UPDATE {uc_affiliate2_product_commission} SET commission_structure= "%s" WHERE nid = %d', serialize($commission_structure), $nid);
  }
  else {
    db_query('INSERT {uc_affiliate2_product_commission} (nid, commission_structure) VALUES (%d, "%s")', $nid, serialize($commission_structure));
  }
}

function uc_affiliate2_links() {
  global $user;

  $output = '';

  $products = array('all' => 'Show All');
  $products += _uc_affiliate2_get_products();

  if (count($products) > 1) {
    $output .= '<b> Export product feed </b>';
    $output .= '<br />Choose the products which you want included in your feed. <br />';
    $output .= 'All product links will have your affiliate id included. <br /><br /> ';

    $output .= drupal_get_form('_uc_affiliate2_product_form', $products);
  }
  else {
    $output .= 'No products found.';
  }

  return $output;
}

// This function exports the products in html
function uc_affiliate2_links_export() {
  $ids = func_get_args();
  $output = '<br /><img src="'. $GLOBALS['base_url'] .'/misc/watchdog-error.png'.'" /> is the placeholder image in case none is present. <br />';

  if ($ids[0] == 'all') {
    $products = _uc_affiliate2_get_products('html');
  }
  else {
    $products = _uc_affiliate2_get_products('html', $ids);
  }

  $output .= _uc_affiliate2_display_products($products);

  return $output;
}

// Show the html products in a table
function _uc_affiliate2_display_products($products) {
  global $base_url;

  $header[] = array('field' => 'product_title', 'data' => t('Product Title'));
  $header[] = array('field' => 'preview', 'data' => t('Preview'));
  $header[] = array('field' => 'code', 'data' => t('Code'));

  if(count($products) < 1) {
    return t('No products found.');
  }

  foreach ($products as $key => $product) {
    $line = array();

    $line[] = $key;
    $line[] = $product;
    $line[] = '<textarea cols="60" rows="4">'. $product .'</textarea>';

    $rows[] = $line;
  }

  return theme('table', $header, $rows);;
}

function _uc_affiliate2_product_form(&$form_state, $products) {
  drupal_add_js(drupal_get_path('module', 'uc_affiliate2') .'/uc_affiliate2.js');

  $form['products'] = array(
    '#type' => 'checkboxes',
    '#columns' => 2,
    '#options' => $products,
    '#theme' => 'uc_affiliate2_columns_checkboxes',
  );

  $form['export_type'] = array(
    '#type' => 'radios',
    '#title' => t('Export in'),
    '#options' => array('html' => 'HTML', 'csv' => 'CSV'),
    '#default_value' => 'csv',
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Export'));

  return $form;
}

function _uc_affiliate2_product_form_submit($form, &$form_state) {
  global $user;

  $show_these = array();

  // build the filter array for _uc_affiliate2_get_products from the form checkboxes
  foreach ($form_state['values']['products'] as $product_id => $status) {
    if ($status !== 0) {
      $show_these[] = $product_id;
    }
  }

  if (in_array('all', $show_these)) {
      $show_these = array('all'); // we don't need anything else
  }

  if (count($show_these) > 0) {
    if ($form_state['export_type'] == 'csv') {
      drupal_set_header("Content-Type: application/csv; charset=\"utf-8\"\n");
      drupal_set_header('Content-Disposition: attachment; filename="export.csv"');

      if ($show_these[0] == 'all') {
        print _uc_affiliate2_get_products('csv');
      }
      else {
        print _uc_affiliate2_get_products('csv', $show_these);
      }

      //module_invoke_all('exit'); - this causes a header warning in the watchlog because the form tries to redirect to itself
      exit;
    }
    else { // html
      $ids = join('/', $show_these);
      $path = join('/', array('user', $user->uid, 'affiliate', 'links', 'export', $ids));

      drupal_goto($path);
    }
  }
  else {
    drupal_set_message(t('You must select at least one product.'));
  }
}

function _uc_affiliate2_display_banners() {
  global $base_url, $user;

  $banners = variable_get('affiliate_banner_template', '');

  $header[] = array('field' => 'banner_preview', 'data' => t('Banner Preview'));
  $header[] = array('field' => 'banner_code', 'data' => t('Banner Code'));

  $banners = explode('<', $banners);
  unset($banners[0]);

  if(count($banners) < 1) {
    return;
  }

  foreach ($banners as $banner) {
    $banner = '<'. $banner;
    $banner_link = l($banner, 'affiliate/'. $user->name, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));

    $line = array();
    $line[] = $banner;
    $line[] = '<textarea cols="45">'. $banner_link .'</textarea>';
    $rows[] = $line;
  }

  return theme('table', $header, $rows);
}

function _uc_affiliate2_get_products($mode = 'form', $show = array()) {
  global $user;

  if ($mode == 'html') {
    $template = variable_get('affiliate_product_html_template', '<div id="prodcontain"><a href="[LINK]"><img src="[IMG]"></a><br /><div id="description">description:</div>[DESCRIPTION]<br /><div id="price">[PRICE]</div><br /></div>');
  }

  // Get active products
  $where = '';
  $products = array();
  $output = '';

  if ($mode == 'csv') {
    $output = "Product Name, Price, Description, Image Link, Link\n";
  }

  if (count($show) > 0) {// are we filtering the query?
    $placeholders = str_repeat('%d, ', count($show));
    $placeholders = substr($placeholders, 0, strlen($placeholders) -2); // remove the final ', '

    $where = ' and node.nid IN ('. $placeholders .')';
  }

  $result = db_query("select node.nid from {uc_products} uc_products inner join {node} node on uc_products.nid = node.nid where node.status = 1 $where", $show);

  if (!$result && !$where) {
    return;
  }

  while ($node = db_fetch_object($result)) {
    $product = node_load($node->nid);

    // Grab terms for products, and the manufacturer
    $terms = array();
    $manufacturer = variable_get('uc_google_base_csv_default_manufacturer', '');
    $manufacturer_vid = variable_get('uc_manufacturer_vid', 5);
    foreach ($product->taxonomy as $term) {
     $ancestors = taxonomy_get_parents_all($term->tid);
     foreach ($ancestors as $ancestor) {
       $terms[] = $ancestor->name;
     }
    }

    $product->path = (!$product->path) ? 'node/'. $product->nid : $product->path;
    $link = $GLOBALS['base_url'] .'/affiliate/'. $user->name .'/'. $product->path;

    if (empty($product->field_image_cache[0]['filepath'])) {
      $image = 'N/A';
    }
    else {
      $image = $GLOBALS['base_url'] .'/'. file_directory_path() .'/'. rawurlencode(basename($product->field_image_cache[0]['filepath']));
    }

    $title = check_plain($product->title);
    $description = str_replace('"', "'", strip_tags($product->body));

    switch ($mode) {
      case 'csv':
        $output .= $title .',';
        $output .= $product->sell_price .',';
        $output .= '"'. $description .'",';

        $output .= $image .',';

        $output .=  $link ."\n";
      break;

      case "form":
        $products[$product->nid] = $product->title;
      break;

      case "html":
        $image = ($image == 'N/A') ? $GLOBALS['base_url'] .'/misc/watchdog-error.png' : $image;
        $products[$title] = str_replace(array('[LINK]', '[IMG]', '[DESCRIPTION]', '[PRICE]'), array($link, $image, $description, $product->sell_price), $template);
      break;
    }
  }

  if ($mode == 'csv') {
    return $output;
  }

  return $products;
}

/**
 * Define the admin settings form
 */
function uc_affiliate2_admin_settings() {
  $form['affiliate_banner_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Affiliate Banner Templates'),
    '#description' => t('The IMG tag(s) around which the url of the affiliate is wrapped around. Insert as many as you want.'),
    '#default_value' => variable_get('affiliate_banner_template', ''),
  );
  $form['affiliate_text_link_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate Text Link Template'),
    '#description' => t('The text around which the url of the affiliate is wrapped around. HTML is allowed.'),
    '#default_value' => variable_get('affiliate_text_link_template', ''),
  );
  $form['affiliate_product_html_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Affiliate Product HTML Template (used for Export)'),
    '#description' => t('When using the html export function in the affiliate panel, this template is used for each product.'),
    '#default_value' => variable_get('affiliate_product_html_template', '<div id="prodcontain"><a href="[LINK]"><img src="[IMG]"></a><br /><div id="description">description:</div>[DESCRIPTION]<br /><div id="price">[PRICE]</div></div>'),
  );
  $form['affiliate_hierarchy_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate hierarchy depth'),
    '#description' => t('Controls the depth to which affiliates referrals and commissions are tracked'),
    '#default_value' => variable_get('affiliate_hierarchy_depth', 5),
    '#size' => 3
  );
  $form['affiliate_commission_structure'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Affiliate Commission Structure'),
    '#description' => t('Sets the default commission structure.  This should be a comma separated list of number with the first value corresponding to the first level in the hierarchy and each successive value corresponding to the next level in the hierarchy.  Example: 5,4,2,2,1'),
    '#default_value' => variable_get('affiliate_commission_structure', '5,3,2,2,1'),
    '#size' => 10
  );

  foreach (uc_order_status_list('general') as $status) {
    $statuses[$status['id']] = $status['title'];
  }
  $form['affiliate_commission_order_status'] = array(
    '#type' => 'select',
    '#title' => t('Order status'),
    '#default_value' => variable_get('affiliate_commission_order_status', 'completed'),
    '#description' => t('Where in the order status that commissions will be assigned.'),
    '#options' => $statuses,
  );
  $form['affiliate_invalid_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('On an invalid affiliate URL, redirect to'),
    '#description' => t('When an invalid username is used as a subdomain, the user will be redirected to this URL.'),
    '#default_value' => variable_get('affiliate_invalid_redirect', '')
  );
  $form['affiliate_enable_subdomain_handling'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable affiliate subdomain handling'),
    '#description' => t("If enabled, this module will record affiliate actions if customers visit the site through an affiliate subdomain, like john.thissite.com. Enable this only if drupal is not installed on a subdomain."),
    '#default_value' => variable_get('affiliate_enable_subdomain_handling', 0),
  );

  $roles = user_roles(FALSE, 'act as affiliate');

  foreach ($roles as $rid => $role) {
    $form['affiliate_settings_role_'. $rid] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings for @role', array('@role' => $role)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['affiliate_settings_role_'. $rid]['affiliate_commission_structure_'. $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate Commission Structure for cookied role: @role', array('@role' => $role)),
      '#description' => t('Sets the commission structure for the role, when the user has returned via cookie. This should be a comma separated list of number with the first value corresponding to the first level in the hierarchy and each successive value corresponding to the next level in the hierarchy.  Example: 5,4,2,2,1'),
      '#default_value' => variable_get('affiliate_commission_structure_'. $rid, '5,3,2,2,1'),
      '#size' => 10
    );
    $form['affiliate_settings_role_'. $rid]['affiliate_comission_'. $rid .'_switch_after'] = array(
      '#type' => 'textfield',
      '#title' => t('Switch to comission settings per role after'),
      '#description' => t('Time after which the per role comission structure settings will be used, instead of the default ones. Strtotime syntax.'),
      '#default_value' => variable_get('affiliate_comission_'. $rid .'_switch_after', '2 days'),
     );
    $form['affiliate_settings_role_'. $rid]['affiliate_set_cookie_'. $rid] = array(
      '#type' => 'checkbox',
      '#title' => t('Set the affiliate cookie for the visiting user.'),
      '#description' => t('By setting the cookie, the affiliate gets credited even when no affiliate id is present in links visited.'),
      '#default_value' => variable_get('affiliate_set_cookie_'. $rid, 0),
    );
    $form['affiliate_settings_role_'. $rid]['affiliate_cookie_lifetime_'. $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Cookie Lifetime'),
      '#description' => t('How long should the cookie be valid. Strtotime syntax.'),
      '#default_value' => variable_get('affiliate_cookie_lifetime_'. $rid, '1 year'),
    );
  }

  return system_settings_form($form);
}

function uc_affiliate2_admin_settings_validate($form, &$form_state) {
  $url = $form_state['values']['affiliate_invalid_redirect'];

  if (!empty($url) && ($url != check_url($url) || strpos($url, '://') !== FALSE)) {
    form_set_error('affiliate_invalid_redirect', t('Please enter a valid Drupal path, without the http and domain parts.'));
  }

  $roles = user_roles(FALSE, 'act as affiliate');
  foreach ($roles as $rid => $role) {
    if (!strtotime($form_state['values']['affiliate_cookie_lifetime_'. $rid])) {
      form_set_error('affiliate_cookie_lifetime_'. $rid, t('Invalid strtotime syntax.'));
    }
  }
}

/**
 * Define the affiliate users listing
 */
function uc_affiliate2_admin_manage() {
  $user_id = arg(3);
  if ($user_id && is_numeric($user_id)) {
    return uc_affiliate2_admin_users($user_id);
  }

  // setup the table
  $header = array(
    array('data' => t('Username'), 'field' => 'u.name'),
    array('data' => t('Status'), 'field' => 'u.status'),
    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),
    array('data' => t('Last access'), 'field' => 'u.access'),
    array('data' => t('Visits'), 'field' => 'clicks'),
    array('data' => t('Users'), 'field' => 'users'),
    array('data' => t('Orders'), 'field' => 'orders'),
  );

  // define the query
  $sql = "SELECT u.uid, u.name, u.status, u.created, u.access, ac.time,
          SUM(ac.clicks) AS clicks, SUM(ac.users) AS users, SUM(ac.orders) AS orders
            FROM {users} u
              LEFT OUTER JOIN {users_roles} ur ON u.uid = ur.uid
              LEFT OUTER JOIN {uc_affiliate2_counts} ac ON u.uid = ac.aid
                WHERE ur.rid IN (SELECT r.rid from {role} r INNER JOIN {permission} p ON r.rid = p.rid WHERE p.perm LIKE '%act as affiliate%')
                GROUP BY u.uid";

  $sql .= tablesort_sql($header);
  $result = db_query($sql);

  $status = array(t('blocked'), t('active'));

  while ($account = db_fetch_object($result)) {
    $rows[] = array(
      l($account->name, 'admin/store/affiliate/'. $account->uid),
      $status[$account->status],
      format_interval(time() - $account->created),
      $account->access ? t('@time ago', array('@time' => format_interval(time() - $account->access))) : t('never'),
      $account->clicks ? $account->clicks : '0',
      $account->users ? $account->users : '0',
      $account->orders ? $account->orders : '0',
    );
  }

  $output = "<p>". t("Click on an affiliate user to view their monthly sales and commissions.");
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  return $output;
}

function uc_affiliate2_admin_users($uid) {
  // used to determine whether to show the paid form.
  $month_timestamp = arg(4);

  $user = user_load(array('uid' => $uid));

  // setup the table
  $header = array(
    array('data' => t('Month'), 'field' => 'date'),
    array('data' => t('Sales'), 'field' => 'sales'),
    array('data' => t('Commissions'), 'field' => 'commissions'),
    array('data' => t('Paid (click to edit)'), 'field' => 'paid'),
  );

  // define the query
  $sql = 'SELECT ac.commission, uo.order_total, uo.created FROM {uc_affiliate2_commission} AS ac LEFT OUTER JOIN {uc_orders} AS uo ON ac.order_id = uo.order_id WHERE ac.aid = %d';
  $result = db_query($sql, $uid);

  $total_sales = array();
  $total_commissions = array();
  $amounts = _uc_affiliate2_get_amounts('aid', $uid, 'date');

  while ($rec = db_fetch_array($result)) {
    $date_array = getdate($rec['created']);
    $mondate = mktime(0, 0, 0, $date_array['mon'], 1, $date_array['year']);
    $total_sales[$mondate] = isset($total_sales[$mondate]) ? $total_sales[$mondate]+$rec['order_total'] : $rec['order_total'];
    $total_commissions[$mondate] = isset($total_commissions[$mondate]) ? $total_commissions[$mondate]+$rec['commission'] : $rec['commission'];
  }

  foreach ($total_sales as $date => $sales) {
    // load current amount paid
    $amount = ($amounts[$date]) ? $amounts[$date] : 0;
    $amount = uc_currency_format($amount);

    // format paid field as link or form
    if ($month_timestamp && is_numeric($month_timestamp) && $date == $month_timestamp) {
      $form['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount paid'),
        '#default_value' => $amount,
        '#size' => 8,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
      );
      $form['#validate'] = array(
        'uc_affiliate2_admin_users_paid_validate' => array($uid, $date)
      );
      $form['#submit'] = array(
        'uc_affiliate2_admin_users_paid_submit' => array($uid, $date)
      );

      drupal_process_form('uc_affiliate2_'. $uid .'_paid_'. $date, $form);
      drupal_prepare_form('uc_affiliate2_'. $uid .'_paid_'. $date, $form);

      $paid = drupal_render_form('uc_affiliate2_'. $uid .'_paid_'. $date, $form);
    }
    else {
      $paid = l($amount, join('/', array(arg(0), arg(1), arg(2), arg(3), $date)));
    }

    // generate record
    $rows[] = array(
      format_date($date, 'custom', 'M Y'),
      uc_currency_format($sales),
      uc_currency_format($total_commissions[$date]),
      $paid
    );
  }

  $output = "<p>". t("Displaying affiliate sales and commissions for ") . theme('username', $user) .".";

  $output .= theme('table', $header, $rows);

  return $output;
}

function uc_affiliate2_admin_users_paid_validate($form, &$form_state) {
  $sign = variable_get('uc_currency_sign', '$');
  $amount = $form_state['values']['amount'];
  if (!is_numeric($amount)) {
    $amount = trim($amount);
    if (substr($amount, 0, 1)==$sign) {
      $amount = substr($amount, 1);
    }
  }
  if (!is_numeric($amount) || $amount < 0) {
    form_set_error('amount', t('Please specify an amount paid to this affiliate.'));
  }
}

function uc_affiliate2_admin_users_paid_submit($form, &$form_state) {
  $sign = variable_get('uc_currency_sign', '$');
  $amount = $form_state['values']['amount'];

  if (!is_numeric($amount)) {
    $amount = trim($amount);
    if (substr($amount, 0, 1)==$sign) {
      $amount = substr($amount, 1);
    }
  }

  $rec = db_result(db_query('SELECT amount FROM {uc_affiliate2_paid} WHERE aid=%d AND date=%d', $uid, $date));
  if ($rec===FALSE) {
    db_query('INSERT {uc_affiliate2_paid} (aid, date, amount) VALUES (%d, %d, %f)', $uid, $date, $amount);
  }
  else {
    db_query('UPDATE {uc_affiliate2_paid} SET amount=%f WHERE aid=%d AND date=%d', $amount, $uid, $date);
  }

  $user = user_load(array('uid' => $uid));
  drupal_set_message(t('Registered payment of @amount for !user during @date.', array('@amount' => uc_currency_format($amount), '!user' => theme('username', $user), '@date' => format_date($date, 'custom', 'M Y'))));

  return 'admin/store/affiliate/'. $uid;
}

/**
 * Used to avoid the N+1 queries problem on monthly_report and admin_users.
 */
function _uc_affiliate2_get_amounts($filter, $filter_value, $index) {
  $amount_results = db_query("SELECT amount, aid, date FROM {uc_affiliate2_paid} WHERE $filter = %d", $filter_value);
  $amounts = array();

  while ($amount_data = db_fetch_array($amount_results)) {
    $amounts[$amount_data[$index]] = $amount_data['amount'];
  }
}

function uc_affiliate2_monthly_report() {
   // The month we are viewing. If this is empty, the current month is assumed.
  $month_timestamp = arg(4);

  if ($month_timestamp && is_numeric($month_timestamp)) {
    $date_array = getdate($month_timestamp);
  }
  else {
    $date_array = getdate();
  }

   // Used to determine whether to show the paid form
  $uid_external = arg(5);

  // setup the table
  $header = array(
    array('data' => t('Affiliate'), 'field' => 'aid'),
    array('data' => t('Sales'), 'field' => 'sales'),
    array('data' => t('Commissions'), 'field' => 'commissions'),
    array('data' => t('Paid (click to edit)'), 'field' => 'paid'),
  );

  // define the query
  $date_start = mktime(0, 0, 0, $date_array['mon'], 1, $date_array['year']);

  if ($date_array['mon'] == 12) {
    $date_end = mktime(0, 0, 0, 1, 1, $date_array['year'] + 1);
  }
  else {
    $date_end = mktime(0, 0, 0, $date_array['mon'] + 1, 1, $date_array['year']);
  }

  $sql = 'SELECT ac.aid, ac.commission, uo.order_total FROM {uc_affiliate2_commission} AS ac LEFT OUTER JOIN {uc_orders} AS uo ON ac.order_id = uo.order_id WHERE uo.created BETWEEN %d AND %d';
  $result = db_query($sql, $date_start, $date_end);

  $total_sales = array();
  $total_commissions = array();
  $amounts = _uc_affiliate2_get_amounts('date', $date_start, 'aid');

  while ($rec = db_fetch_array($result)) {
    $aid = $rec['aid'];
    $total_sales[$aid] = isset($total_sales[$aid]) ? $total_sales[$aid] + $rec['order_total'] : $rec['order_total'];
    $total_commissions[$aid] = isset($total_commissions[$aid]) ? $total_commissions[$aid] + $rec['commission'] : $rec['commission'];
  }

  $user_results = db_query('SELECT name, uid FROM {users}');
  $users = array();

  while ($user = db_fetch_array($user_results)) {
    $users[$user['uid']] = $user['name'];
  }

  foreach ($total_sales as $uid => $sales) {
    $amount = ($amounts[$uid]) ? $amounts[$uid] : 0;
    $amount = uc_currency_format($amount);

    // format paid field as link or form
    if ($uid_external && is_numeric($uid_external) && $uid == $uid_external) {
      $form['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount paid'),
        '#default_value' => $amount,
        '#size' => 8,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
      );
      $form['#validate'] = array(
        'uc_affiliate2_admin_users_paid_validate' => array($uid, $date_start)
      );
      $form['#submit'] = array(
        'uc_affiliate2_admin_users_paid_submit' => array($uid, $date_start)
      );
      $form['#redirect'] = 'admin/store/affiliate/reports/'. $date_start;

      drupal_process_form('uc_affiliate2_'. $uid .'_paid_'. $date_start, $form);
      drupal_prepare_form('uc_affiliate2_'. $uid .'_paid_'. $date_start, $form);

      $paid = drupal_render_form('uc_affiliate2_'. $uid .'_paid_'. $date_start, $form);
    }
    else {
      $paid = l($amount, join('/', array(arg(0), arg(1), arg(2), arg(3), $date_start, $uid)));
    }

    // generate record
    $rows[] = array(
      theme('username', $users[$uid]),
      uc_currency_format($sales),
      uc_currency_format($total_commissions[$uid]),
      $paid
    );
  }

  $output = "<p>". t("Displaying affiliate sales and commissions for ") . format_date($date_start, 'custom', 'M Y') .".";
  $output .= t("Show ") . l(t('previous month'), join('/', array(arg(0), arg(1), arg(2), arg(3), $date_start-1)));
  $output .= t(" or ") . l(t('next month'), join('/', array(arg(0), arg(1), arg(2), arg(3), $date_end))) .'.';

  $output .= theme('table', $header, $rows);

  return $output;
}

/*
 * Increment affiliate counts
 */
function uc_affiliate2_add_count($aff, $clicks = 0, $users = 0, $orders = 0) {
  $time = time();

  if ($clicks > 0) {
    db_query('INSERT INTO {uc_affiliate2_clicks} (aid, time) VALUES (%d, %d)', $aff, $time);
  }

  $res = db_fetch_object(db_query('SELECT * FROM {uc_affiliate2_counts} WHERE aid=%d AND time=%d', $aff, $time));
  if ($res && $res->time) {
    db_query('UPDATE {uc_affiliate2_counts} SET clicks=(clicks+%d), users=(users+%d), orders=(orders+%d) WHERE aid=%d AND time=%d', $clicks, $users, $orders, $aff, $time);
  }
  else {
    db_query('INSERT {uc_affiliate2_counts} (aid, clicks, users, orders, time) VALUES (%d, %d, %d, %d, %d)', $aff, $clicks, $users, $orders, $time);
  }
}

/**
 * Implementation of hook_user()
 */
function uc_affiliate2_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'insert':
      // update user count for affiliate and associate user with affiliate
      $aff = $_SESSION['affiliate'];
      if ($aff) {
        db_query('INSERT INTO {uc_affiliate2_users} (aid, uid) VALUES (%d, %d)', $aff, $user->uid);
        uc_affiliate2_add_count($aff, 0, 1, 0);
        watchdog('user', 'User %name referred by user id %affiliate', array('%name' => theme('username', $user), '%affiliate' => theme('placeholder', $aff)));
      }
      break;
    case 'view':
      if (user_access('act as affiliate', $user) && $user->uid > 1) {
        $user->content['affiliate'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('Affiliate'),
          'link' => array(
            '#type' => 'user_profile_item',
            '#value' => t('Manage your business ') . l(t('here'), "user/{$user->uid}/affiliate"),
          ),
        );

      }
      break;
    case 'form':
      if (user_access('adjust user commissions')) {
        $form['commission_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Affiliate Commission Settings'),
          '#collapsible' => TRUE,
          '#weight' => 10,
        );

        $form['commission_settings']['commission'] = array(
          '#type' => 'textfield',
          '#title' => t('Commission'),
          '#default_value' => $edit['commission'],
          '#description' => t('The commission percentage for this user (number only). Leave blank to use either product or global commissions.')
        );
      }

      return $form;

    break;
  }
}
/*
 * Display dashboard for affiliate
 */
function uc_affiliate2_dashboard() {
  global $user;

  $account = user_load(array('uid' => arg(1)));

  $commissions = array('today' => 0, '7days' => 0, '365days' => 0);
  $clicks = array('today' => 0, '7days' => 0, '365days' => 0);

  // get today's commissions
  $dates_today = _uc_affiliate2_predefined_range(7);

  $sql = 'SELECT COUNT(ac.commission_id) as cnt FROM {uc_affiliate2_commission} ac INNER JOIN {uc_orders} uco on ac.order_id = uco.order_id WHERE aid = ' . $account->uid . ' AND uco.created between ' . $dates_today['start'] . ' AND ' . $dates_today['end'];
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $commissions['today'] += $count['cnt'];
  }

  // get commissions from the last 7 days
  $dates_week = _uc_affiliate2_predefined_range(6);

  $sql = 'SELECT COUNT(ac.commission_id) as cnt FROM {uc_affiliate2_commission} ac INNER JOIN {uc_orders} uco on ac.order_id = uco.order_id WHERE aid = ' . $account->uid . ' AND uco.created between ' . $dates_week['start'] . ' AND ' . $dates_week['end'];
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $commissions['7days'] += $count['cnt'];
  }

  // get commissions from the last year
  $dates_year = _uc_affiliate2_predefined_range(5);

  $sql = 'SELECT COUNT(ac.commission_id) as cnt FROM {uc_affiliate2_commission} ac INNER JOIN {uc_orders} uco on ac.order_id = uco.order_id WHERE aid = ' . $account->uid . ' AND uco.created between ' . $dates_year['start'] . ' AND ' . $dates_year['end'];
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $commissions['365days'] += $count['cnt'];
  }

  // get today's clicks
  $sql = "SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) as click_date, count(click_id) as clicks from {uc_affiliate2_clicks} WHERE aid = " . $account->uid . " AND time between " . $dates_today['start'] . " AND " . $dates_today['end'] . " GROUP BY click_date";
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $clicks['today'] += $count['clicks'];
  }

  // get commissions from the last 7 days
  $sql = "SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) as click_date, count(click_id) as clicks from {uc_affiliate2_clicks} WHERE aid = " . $account->uid . " AND time between " . $dates_week['start'] . " AND " . $dates_week['end'] . " GROUP BY click_date";
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $clicks['7days'] += $count['clicks'];
  }

  // get commissions from the last year
  $sql = "SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) as click_date, count(click_id) as clicks from {uc_affiliate2_clicks} WHERE aid = " . $account->uid . " AND time between " . $dates_year['start'] . " AND " . $dates_year['end'] . " GROUP BY click_date";
  $result = db_query($sql);

  while ($count = db_fetch_array($result)) {
    $clicks['365days'] += $count['clicks'];
  }

  drupal_set_title(t('Affiliate Center'));

  $output = '';

  $output .= '<div id="affiliate-sales-header"><h2>Commission History</h2> <br />';

  $output .= 'Sales Today: '. $commissions['today']  .' <br />
              Sales last 7 Days: '  . $commissions['7days'] .' <br />
              Last 365 Days: '. $commissions['365days'] .' <br /><br />';

  $commissions_url = join('/', array('user', $account->uid, 'affiliate', 'commissions'));
  $output .= l('Click here for more reports.', $commissions_url, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));

  $output .= '</div>';

  $output .= '<br /><div id="affiliate-sales-click-count"><h2>Unique Click Count</h2> <br />';

  $output .= "Today's Clicks: ". $clicks['today'] ."<br />
              Last 7 Days: ". $clicks['7days'] ."<br />
              Last 365 Days: ". $clicks['365days'] ."<br /><br />";

  $clicks_url = join('/', array('user', $account->uid, 'affiliate', 'clicks'));
  $output .= l('Click here for customized click reporting.', $clicks_url, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));

  $output .= '</div>';

  $output .= '<br /><div id="affiliate-links-header"><h2>'. t('Affiliate Links') .'</h2><br />';

  $text_link = variable_get('affiliate_text_link_template', '');
  $text_link = l($text_link, 'affiliate/'. $account->name, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));
  $output .= '<b>Text Link:</b> <br /> <textarea cols="45">'. $text_link .'</textarea>';

  $output .= _uc_affiliate2_display_banners();

  $links_url = join('/', array('user', $account->uid, 'affiliate', 'links'));
  $output .= '<br />' . l('Click here for product links.', $links_url, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));

  $output .= '</div>';
}

/*
 * Display affiliate commission records
 */
function uc_affiliate2_commissions() {
  drupal_set_title(t('Commissions'));

  $account = user_load(array('uid' => arg(1)));

  // setup the table
  $header = array(
    array('data' => t('Customer'), 'field' => 'uid'),
    array('data' => t('Order'), 'field' => 'order_id', 'sort' => 'desc'),
    array('data' => t('Date'), 'field' => 'order_date'),
    array('data' => t('Notes'), 'field' => 'commission_notes'),
    array('data' => t('Purchase'), 'field' => 'purchase'),
    array('data' => t('Commission'), 'field' => "commission"),
  );

  // Create sql to affiliate's commissions
  $dates = _uc_affiliate2_predefined_range(arg(4));
  $sql = 'SELECT uco.uid, uco.billing_first_name, uco.billing_last_name, ac.order_id, uco.created as order_date, ac.commission_notes, uco.order_total, ac.commission FROM {uc_affiliate2_commission} ac INNER JOIN {uc_orders} uco on ac.order_id = uco.order_id WHERE aid = '. $account->uid .' AND uco.created between '. $dates['start'] .' AND '. $dates['end'];
  $result = db_query($sql);

  $total_sales = 0;
  $total_commission = 0;
  while ($commission = db_fetch_array($result)) {
    $u = l($commission['billing_first_name'] .' '. $commission['billing_last_name'], 'user/'. $commission['uid']);
    $rows[] = array(
      $u,
      $commission['order_id'],
      format_date($commission['order_date'], 'custom', 'm-d-Y'),
      $commission['commission_notes'],
      uc_currency_format($commission['order_total']),
      uc_currency_format($commission['commission'])
    );
    $total_sales += $commission['order_total'];
    $total_commmission += $commission['commission'];
  }
  $rows[] = array('', '', '', t('Total:'), uc_currency_format($total_sales), uc_currency_format($total_commmission));

  $output = theme('table', $header, $rows);
  $output .= drupal_get_form('uc_affiliate2_time_selection_form');

  return $output;
}

/*
 * Display affiliate clicks
 */
function uc_affiliate2_clicks() {
  drupal_set_title(t('Unique Click count'));

  $account = user_load(array('uid' => arg(1)));

  // setup the table
  $header = array(
    array('data' => t('Date'), 'field' => "click_date", 'sort' => 'desc'),
    array('data' => t('Visits'), 'field' => "clicks"),
  );

  // Create sql to display level of affiliate specified
  $dates = _uc_affiliate2_predefined_range(arg(4));
  $sql = "SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) as click_date, count(click_id) as clicks from {uc_affiliate2_clicks} WHERE aid = ". $account->uid ." AND time between ". $dates['start'] ." AND ". $dates['end'] ." GROUP BY click_date";

  $sql .= tablesort_sql($header);
  $result = db_query($sql);

  $total_clicks = 0;
  while ($click_day = db_fetch_array($result)) {
    $rows[] = array(format_date($click_day['click_date'], 'custom', 'm-d-Y'), $click_day['clicks']);
    $total_clicks += $click_day['clicks'];
  }
  $rows[] = array(t('Total:'), $total_clicks);

  // Build the output
  global $pager_total_items;

  $output = theme('table', $header, $rows);
  $output .= drupal_get_form('uc_affiliate2_time_selection_form');

  return $output;
}

/*
 * Display affiliate's downline
 */
function uc_affiliate2_downline($level = 1) {
  drupal_set_title(t('Downline'));

  //make sure user doesn't try to manipulate depth
  if ($level > variable_get('affiliate_hierarchy_depth', 5)) {
    $level = variable_get('affiliate_hierarchy_depth', 5);
  }

  $account = user_load(array('uid' => arg(1)));

  // setup the table
  $header = array(
    array('data' => t('Username'), 'field' => "u$level.name"),
    array('data' => t('Affiliate'), 'field' => "u$level.status"),
    array('data' => t('Member for'), 'field' => "u$level.created", 'sort' => 'desc'),
    array('data' => t('Last access'), 'field' => "u$level.access"),
    array('data' => t('Level'), 'field' => "u$level.level"),
    array('data' => t('Customers'), 'field' => "uc.user_count"),
  );

  // Create sql to display level of affiliate specified
  $sql = "SELECT u1.uid, uc.user_count ";
  $sql .= "FROM {users} u1 ";
  for ($i=1; $i<=$level; $i++) {
    $next = $i+1;
    $sql .= "INNER JOIN {uc_affiliate2_users} au$i ON au$i.uid = u$i.uid ";
    $sql .= "INNER JOIN {users} u$next ON au$i.aid = u$next.uid ";
  }
  $sql .= "LEFT OUTER JOIN (SELECT au.aid, COUNT(au.uid) as user_count FROM {uc_affiliate2_users} au GROUP BY au.aid) uc on uc.aid = u1.uid ";
  $sql .= "WHERE u$next.uid = ". $account->uid;

  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 25);

  // create the data rows for our table
  while ($affiliate = db_fetch_object($result)) {
    $user = user_load(array('uid' => $affiliate->uid));
    $rows[] = array(
      theme('username', $user),
      user_access('act as affiliate', $user) ? 'Yes' : 'No',
      format_interval(time() - $user->created),
      $user->access ? t('%time ago', array('%time' => format_interval(time() - $user->access))) : t('never'),
      $level,
      $affiliate->user_count ? $affiliate->user_count : 0
    );
  }

  // Build the output
  $output = '<ul class="tabs secondary">';
  for ($i=1; $i<=variable_get('affiliate_hierarchy_depth', 5); $i++) {
    $output .= ($i == $level ? '<li class="active">' : '<li>');
    $output .= l(t("Level") ." ". $i, 'user/'. $account->uid .'/affiliate/downline/'. $i) ."</li>";
  }
  $output .= "</ul>";

  global $pager_total_items;
  $output .= '<h2>'. t('Total Level !level, Customers: !customers', array('!level' => $level, '!customers' => $pager_total_items[0])) .'</h2>';
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  return $output;
}

/*
 * Display affiliate's upline
 */
function uc_affiliate2_upline() {
  drupal_set_title(t('Upline'));

  $account = user_load(array('uid' => arg(1)));

  // setup the table
  $header = array(
    array('data' => t('Level')),
    array('data' => t('Username')),
    array('data' => t('Member for')),
    array('data' => t('Last access')),
    array('data' => t('Customers')),
  );

  // Create sql to display user's upline
  $level = variable_get('affiliate_hierarchy_depth', 5);
  $rows = array();
  $next_uid = $account->uid;
  for ($i=1; $i<=$level; $i++) {
    $sql = "SELECT u.uid, u.name, u.status, u.created, u.access, uc.user_count, ". $i ." AS level ";
    $sql .= "FROM {users} u INNER JOIN {uc_affiliate2_users} au ON au.aid = u.uid ";
    $sql .= "LEFT OUTER JOIN (SELECT au2.aid, COUNT(au2.uid) as user_count FROM {uc_affiliate2_users} au2 GROUP BY au2.aid) uc on uc.aid = u.uid ";
    $sql .= "WHERE au.uid = ". $next_uid;

    // create the data rows for our table
    $result = db_query($sql);
    $status = array(t('blocked'), t('active'));
    while ($affiliate = db_fetch_object($result)) {
      $next_uid = $affiliate->uid;
      $rows[] = array(
        $affiliate->level,
        theme('username', $affiliate),
        format_interval(time() - $affiliate->created),
        $affiliate->access ? t('%time ago', array('%time' => format_interval(time() - $account->access))) : t('never'),
        $affiliate->user_count ? $affiliate->user_count : 0
      );
    }
  }

  if (count($rows) > 0) {
    $output = theme('table', $header, $rows);
  }
  else {
    $output = "<p>". t("You are a top level affiliate.  There are no affiliates in your upline.") ."</p>";
  }
  return $output;
}

/*
 * Implementation of hook_cart_item
 * Add tracking of which store each product comes from
 */
function uc_affiliate2_add_to_cart_data($form_values) {
  if (!empty($_SESSION['affiliate'])) {
    return array('affiliate' => $_SESSION['affiliate']);
  }
}

/*
 * Implementation of hook_order
 * Tracks affiliate commissions
 */
function uc_affiliate2_order($op, $order, $status) {
  global $user;

  if ($op == 'update' && $status == variable_get('affiliate_commission_order_status', 'completed')) {
    // order ready for commission assignment
    // find all affiliates included in order
    $affcom = array();
    // sum the prices of products from each affiliate store
    foreach ($order->products as $product) {
      //TODO enable setting for excluding certain products from commissionable total
      if (isset($product->data['affiliate'])) {
        $aff = $product->data['affiliate'];
        $price = $product->price * $product->qty;
        $affcom[$aff]['total'] = isset($affcom[$aff]['total']) ? $affcom[$aff]['total'] + $price : $price;
        $affcom[$aff]['nid'] = $product->nid;
      }
    }

    // write commission records
    foreach ($affcom as $affid => $data) {
      $affs = _uc_affiliate2_get_upline_ids($affid);

      for ($i=0; $i<count($affs); $i++) {
        $aff = $affs[$i];
        $level = $i+1;
        $comm_pct = _uc_affiliate2_get_commission_percentage($level, $data['nid']);
        if ($comm_pct>0) {
          //TODO should this be rounded to nearest penny???
          $comm = $data['total'] * $comm_pct;
          $note = t('Level @level commission of @percent% recorded for affiliate @affiliate', array('@affiliate' => $aff, '@percent' => $comm_pct*100, '@level' => $level, '@commission' => uc_currency_format($comm), '@ordertotal' => uc_currency_format($total), '@firstname' => $order->billing_first_name, '@lastname' => $order->billing_last_name));
          db_query("INSERT {uc_affiliate2_commission} (order_id, aid, commission, commission_notes) VALUES (%d, %d, %f, '%s')", $order->order_id, $aff, $comm, $note);
          uc_order_comment_save($order->order_id, $user->uid, $note);
          uc_affiliate2_add_count($aff, 0, 0, 1);
        }
      }
    }
  }
}


/**
 * uc_affiliate2 helper methods
 */

/*
 * Period Selection form
 */
function uc_affiliate2_time_selection_form(&$form_state, $method='') {
  // Date Setup
  $dates = _uc_affiliate2_predefined_range(arg(4));
  $dt_first = $dates['start'];
  $dt_last = $dates['end'];

  // Create the form
  $form = array();
  $form['range_display'] = array(
    '#prefix' => '<p><strong>',
    '#value' => t('Currently Displaying: ') . date('Y-n-j', $dt_first) . t(' through ') . date('Y-n-j', $dt_last),
    '#suffix' => '</strong></p>'
  );
  $form['time_selector'] = array(
    '#title' => t('Customize This Report'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $form['periods'] = array(
    '#type' => 'value',
    '#value' => array(t('This Month'), t('Last Month'), t('Last 30 days'), t('Last 60 Days'), t('Last 90 Days'))
  );
  $form['time_selector']['period'] = array(
    '#title' => t('Select a predefined range'),
    '#type' => 'select',
    '#options' => $form['periods']['#value'],
    '#default_value' => arg(4)
  );
  $form['time_selector']['use_dates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Search using date range.'),
    '#default_value' => arg(5) != 0 ? 1 : 0,
  );
  $form['time_selector']['begin_date'] = array(
    '#prefix' => '<span style="float:left;margin-right:15px;">',
    '#suffix' => '</span>',
    '#title' => t('Start Date'),
    '#type' => 'date',
    '#description' => t('Select a beginning date.'),
    '#default_value' => array(
      'month' => date('n', $dt_first),
      'day' => date('j', $dt_first),
      'year' => date('Y', $dt_first)
      ),
    '#required' => FALSE
  );
  $form['time_selector']['end_date'] = array(
    '#prefix' => '<span style="float:left;">',
    '#suffix' => '</span><br class="clearfix"/>',
    '#title' => t('End Date'),
    '#type' => 'date',
    '#description' => t('Select an end date.'),
    '#default_value' => array(
      'month' => date('n', $dt_last),
      'day' => date('j', $dt_last),
      'year' => date('Y', $dt_last)
      )
  );
  $form['time_selector']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  return $form;
}

function uc_affiliate2_time_selection_form_submit($form, &$form_state) {
  if ($form_state['values']['use_dates']) {
    $start_date = mktime(0, 0, 0, $form_state['values']['begin_date']['month'], $form_state['values']['begin_date']['day'], $form_state['values']['begin_date']['year']);
    $end_date = mktime(23, 59, 59, $form_state['values']['end_date']['month'], $form_state['values']['end_date']['day'], $form_state['values']['end_date']['year']);
  }
  else {
    $start_date = '0';
    $end_date = '0';
  }
  drupal_goto(arg(0) .'/'. arg(1) .'/'. arg(2) .'/'. arg(3) .'/'. $form_state['values']['period'] .'/'. $start_date .'/'. $end_date);
}

function _uc_affiliate2_predefined_range($type=0) {
  $now = time();
  $dates = array();

  if (arg(5)!= 0 && arg(6)!= 0) {
    $dates = array('start' => arg(5), 'end' => arg(6));

    return $dates;
  }

  switch ($type) {
    case 0: // this month
      $dates['start'] = mktime(0, 0, 0, date("m", $now) , 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now)+1 , 0, date("Y", $now));
      break;
    case 1: // last month
      $dates['start'] = mktime(0, 0, 0, date("m", $now)-1 , 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , 0, date("Y", $now));
      break;
    case 2: // last 30 days
      $start = strtotime("-30 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
    case 3: // last 60 days
      $start = strtotime("-60 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
    case 4: // last 90 days
      $start = strtotime("-90 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
    case 5: // last 365 days
      $start = strtotime("-365 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
    case 6: // last 7 days
      $start = strtotime("-7 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
    case 7: // today
      $start = strtotime("-1 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start) , date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) , date("d", $now), date("Y", $now));
      break;
  }

  return $dates;
}

/**
 * Determine an affiliate's upline
 */
function _uc_affiliate2_get_upline_ids($aff) {
  if ($aff) {
    $level = variable_get('affiliate_hierarchy_depth', 5);
    $affids = array($aff);
    while ($aff = _uc_affiliate2_get_user($aff)) {
      if (count($affids)>=$level) {
        break;
      }
      $affids[] = $aff;
    }
    return $affids;
  }
  else {
    return array();
  }
}

/**
 * Extract the subdomain from the host variable
 */
function _uc_affiliate2_get_subdomain() {
  $host_array = explode('.', $_SERVER['HTTP_HOST']);
  if (count($host_array) <= 2) {
    return '';
  }

  return $host_array[0];
}

function _uc_affiliate2_get_domain() {
  global $base_url;

  $domain = str_replace('http://', '', $base_url);
  $domain = explode('/', $domain);

  return $domain[0];
}

/**
 * Records affiliate ID in the user session and counts the click.
 */
function uc_affiliate2_click($username = '') {
  // If the subdomain handling is enabled, see if the URL references an affiliate in the subdomain
  if (variable_get('affiliate_enable_subdomain_handling', 0)) {
    $subdomain = _uc_affiliate2_get_subdomain();
  }

  if ($subdomain && $subdomain != 'www') {
    $found_affiliate = FALSE;
    $account = user_load(array('name' => $subdomain));

    if (_uc_affiliate2_clicked($account)) {
      $found_affiliate = TRUE;
    }
  }
  else if ($username) {
    $found_affiliate = FALSE;
    $account = user_load(array('name' => $username));

    if (_uc_affiliate2_clicked($account)) { // valid, redirect
      $found_affiliate = TRUE;
    }
  }
  else if ($_REQUEST['a']) {
    $found_affiliate = FALSE;
    $account = user_load(array('uid' => $_REQUEST['a']));

    if (_uc_affiliate2_clicked($account)) {
      $found_affiliate = TRUE;
    }
  }
  else if ($_COOKIE['affiliate'] && !$_SESSION['affiliate']) { // repopulate the session from the cookie
    // Lookup the affiliate's account
    $account = user_load(array('uid' => $_COOKIE['affiliate']['uid']));
    $_SESSION['affiliate'] = $account->uid;
    $_SESSION['affiliate_cookie_timestamp'] = $_COOKIE['affiliate']['timestamp'];
    $_SESSION['affiliate_rid'] = $_COOKIE['affiliate']['rid'];
  }

  if ($found_affiliate === TRUE) {
    $num_args = func_num_args();

    if ($num_args > 1) {
      $args = func_get_args();
      unset($args[0]);
      $path = join('/', $args);
    }
    else {
      $path = '<front>';
    }

    drupal_goto($path);
  }
  else if ($found_affiliate === FALSE) { // invalid affiliate id
    $default_url = variable_get('affiliate_invalid_redirect', '<front>');

    drupal_set_message(t('You are attempting to access an affiliate store that does not exist. Please check the address and try again.'), 'error');
    drupal_goto($default_url);
  }
}

function _uc_affiliate2_clicked($account) {
  global $base_url, $user;

  if ($account->uid > 1 && user_access('act as affiliate', $account)) {
    // store affiliate id in session and increment click count
    if (!$_SESSION['affiliate']) {
      $_SESSION['affiliate'] = $account->uid;
      uc_affiliate2_add_count($account->uid, 1, 0, 0);
    }

    // Get the affiliate role (only the last one)
    $rid = _uc_affiliate2_get_user_rid($account->roles);

    // Do we need to set the cookie? For how long?
    $set_cookie = variable_get('affiliate_set_cookie_'. $rid, 0);

    if ($set_cookie) {
      $cookie_lifetime = variable_get('affiliate_cookie_lifetime_'. $rid, '1 year');
      $cookie_lifetime = strtotime('+ '. $cookie_lifetime);

      //$domain = _uc_affiliate2_get_domain();

      setcookie('affiliate[uid]', $account->uid, $cookie_lifetime, '/');//, '.'. $domain);
      setcookie('affiliate[rid]', $rid, $cookie_lifetime, '/');//, '.'. $domain);
      setcookie('affiliate[timestamp]', time(), $cookie_lifetime, '/');//, '.'. $domain);
    }

    return TRUE;
  }

  return FALSE;
}

function _uc_affiliate2_get_user_rid($user_roles) {
  $roles = user_roles(FALSE, 'act as affiliate');
  $roles = array_intersect_assoc($roles, $user_roles);
  $rids = array_keys($roles);
  $rid = $rids[0];

  return $rid;
}

/**
 * Get the affiliate that a user belongs to
 */
function _uc_affiliate2_get_user($uid) {
  $res = db_query('SELECT * FROM {uc_affiliate2_users} WHERE uid = %d', $uid);
  if (!$res) {
    return 0;
  }
  else {
    $affiliate = db_fetch_array($res);
    return $affiliate['aid'];
  }
}

/**
 * Get an affiliates commission percentage for the given level
 */
function _uc_affiliate2_get_commission_percentage($level = 1, $nid=0) {
  global $user;

  $account = user_load(array('uid' => $_SESSION['affiliate']));

  if ($account->commission) {
    return $account->commission / 100; // we have a commission percentage defined specially for this affilate
  }

  $depth = variable_get('affiliate_hierarchy_depth', 5);

  //check if this product has commission set for it
  $result = db_fetch_object(db_query("SELECT uapc.commission_structure FROM {uc_affiliate2_product_commission} AS uapc WHERE uapc.nid = %d", $nid));
  $product_commission_structure = unserialize($result->commission_structure);
  if ($product_commission_structure) {
    $default_structure = $product_commission_structure;
  }
  else {
    $default_structure = variable_get('affiliate_commission_structure', '5,3,2,2,1');
  }

  if (!empty($_SESSION['affiliate_cookie_timestamp'])) {
    $switch_after = variable_get('affiliate_commission_'. $_SESSION['affiliate_rid'] .'_switch_after', '5,3,2,2,1');
    $now = time();

    if ($now - $_SESSION['affiliate_cookie_timestamp'] >= $switch_after) {
      $structure = variable_get('affiliate_commission_structure_'. $_SESSION['affiliate_rid'], '5,3,2,2,1');
    }
    else {
      $structure = $default_structure;
    }
  }
  else {
    $structure = $default_structure;
  }


  $commission_percents = split(',', $structure);

  if ($level <= $depth && $level <= count($commission_percents)) {
    return $commission_percents[$level-1] / 100;
  }

  return 0;
}

function theme_uc_affiliate2_columns_checkboxes($e) {
  $options = $e['#options'];
  // Set the default if no columns are given.
  if (!isset($e['#columns'])) {
    $e['#columns'] = 8;
  }
  // Set the column number if less than the set amount.
  if (count($options) < $e['#columns']) {
    $e['#columns'] = count($options);
  }
  $rows = array();
  foreach ($options as $key => $value) {
    $row[] = theme_checkbox($e[$key]);
    if (count($row) == $e['#columns']) {
      array_push($rows, $row);
      $row = array();
    }
  }
  // This flushes out the columns when the items don't divide evenly into the columns.
  if (count($row)) {
    array_push($rows, $row);
  }
  return theme_table(NULL, $rows);
}
